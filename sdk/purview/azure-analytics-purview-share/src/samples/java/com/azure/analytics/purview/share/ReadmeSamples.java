// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.share;

import java.util.Optional;
import java.util.UUID;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

public final class ReadmeSamples {

    public void createSentShareSample() {
        // BEGIN: com.azure.analytics.purview.share.createSentShare
        SentSharesClient sentSharesClient =
                new SentSharesClientBuilder()
                        .credential(new DefaultAzureCredentialBuilder().build())
                        .endpoint("https://<my-account-name>.purview.azure.com/share")
                        .buildClient();

        var sentShareId = UUID.randomUUID().toString();
        var sentShare = """
                {
                  "shareKind": "InPlace",
                  "properties": {
                    "displayName": "sentShare1",
                    "description": "description",
                    "artifact": {
                      "storeKind": "AdlsGen2Account",
                      "storeReference": {
                        "type": "ArmResourceReference",
                        "referenceName": "/subscriptions/de06c3a0-4610-4ca0-8cbb-bbdac204bd65/resourceGroups/sender-storage-rg/providers/Microsoft.Storage/storageAccounts/providerstorage"
                      },
                      "properties": {
                        "paths": [
                          {
                            "containerName": "container1",
                            "receiverPath": "SharedFile.txt",
                            "senderPath": "directory/file.txt"
                          }
                        ]
                      }
                    }
                  }
                }
                """;

        RequestOptions requestOptions = new RequestOptions();
        SyncPoller<BinaryData, BinaryData> response =
                sentSharesClient.beginCreateSentShare(sentShareId, BinaryData.fromString(sentShare), requestOptions);
        // END: com.azure.analytics.purview.share.createSentShare
    }

    public void sendInvitationSample() {
        // BEGIN: com.azure.analytics.purview.share.sendInvitation
        SentSharesClient sentSharesClient =
                new SentSharesClientBuilder()
                        .credential(new DefaultAzureCredentialBuilder().build())
                        .endpoint("https://<my-account-name>.purview.azure.com/share")
                        .buildClient();

        var sentShareId = "<sent-share-id>";
        var sentShareInvitationId = UUID.randomUUID().toString();
        var sentShareInvitation = """
                {
                  "invitationKind": "User",
                  "properties": {
                    "notify": true,
                    "targetEmail": "testReceiver@microsoft.com"
                  }
                }
                """;

        RequestOptions requestOptions = new RequestOptions();
        Response<BinaryData> response =
                sentSharesClient.createSentShareInvitationWithResponse(
                        sentShareId,
                        sentShareInvitationId,
                        BinaryData.fromString(sentShareInvitation),
                        requestOptions);
        // END: com.azure.analytics.purview.share.sendInvitation
    }

    public void viewSentInvitationsSample() {
        // BEGIN: com.azure.analytics.purview.share.listSentInvitations
        SentSharesClient sentSharesClient =
                new SentSharesClientBuilder()
                        .credential(new DefaultAzureCredentialBuilder().build())
                        .endpoint("https://<my-account-name>.purview.azure.com/share")
                        .buildClient();

        var sentShareId = "<sent-share-id>";

        RequestOptions requestOptions = new RequestOptions().addQueryParam("$orderBy", "properties/sentAt desc");
        PagedIterable<BinaryData> response =
                sentSharesClient.listSentShareInvitations(sentShareId, requestOptions);
        // END: com.azure.analytics.purview.share.listSentInvitations
    }

    public void viewDetachedReceivedSharesSample() {
        // BEGIN: com.azure.analytics.purview.share.listDetachedReceivedShares
        ReceivedSharesClient receivedSharesClient =
                new ReceivedSharesClientBuilder()
                        .credential(new DefaultAzureCredentialBuilder().build())
                        .endpoint("https://<my-account-name>.purview.azure.com/share")
                        .buildClient();

        RequestOptions requestOptions = new RequestOptions().addQueryParam("$orderBy", "properties/createdAt desc");
        PagedIterable<BinaryData> response = receivedSharesClient.listDetachedReceivedShares(requestOptions);
        // END: com.azure.analytics.purview.share.listDetachedReceivedShares
    }

    public void attachReceivedShareSample() throws JsonMappingException, JsonProcessingException {
        // BEGIN: com.azure.analytics.purview.share.attachReceivedShare
        ReceivedSharesClient receivedSharesClient =
                new ReceivedSharesClientBuilder()
                        .credential(new DefaultAzureCredentialBuilder().build())
                        .endpoint("https://<my-account-name>.purview.azure.com/share")
                        .buildClient();

        RequestOptions listRequestOptions = new RequestOptions().addQueryParam("$orderBy", "properties/createdAt desc");
        PagedIterable<BinaryData> listResponse = receivedSharesClient.listDetachedReceivedShares(listRequestOptions);

        Optional<BinaryData> detachedReceivedShare = listResponse.stream().findFirst();

        if (detachedReceivedShare.isEmpty()) {
            return;
        }

        String receivedShareId = new ObjectMapper()
                .readValue(detachedReceivedShare.get().toString(), ObjectNode.class)
                .get("id")
                .textValue();

        var receivedShare = """
                {
                  "shareKind": "InPlace",
                  "properties": {
                    "sink": {
                      "storeKind": "BlobAccount",
                      "storeReference": {
                        "type": "ArmResourceReference",
                        "referenceName": "/subscriptions/4D8FD81D-431D-4B1D-B46C-C770CFC034FC/resourceGroups/contoso-rg/providers/Microsoft.Storage/storageAccounts/blobAccount"
                      },
                      "properties": {
                          "containerName": "container1",
                          "folder": "folder1",
                          "mountPath": "mountpath1"
                      }
                    }
                  }
                }
                """;

        RequestOptions createRequestOptions = new RequestOptions();
        SyncPoller<BinaryData, BinaryData> createResponse =
                receivedSharesClient.beginCreateReceivedShare(receivedShareId, BinaryData.fromString(receivedShare), createRequestOptions);
        // END: com.azure.analytics.purview.share.attachReceivedShare
    }

    public void listAttachedReceivedShareSample() throws JsonMappingException, JsonProcessingException {
        // BEGIN: com.azure.analytics.purview.share.listAttachedReceivedShare
        ReceivedSharesClient receivedSharesClient =
                new ReceivedSharesClientBuilder()
                        .credential(new DefaultAzureCredentialBuilder().build())
                        .endpoint("https://<my-account-name>.purview.azure.com/share")
                        .buildClient();

        RequestOptions requestOptions = new RequestOptions().addQueryParam("$orderBy", "properties/createdAt desc");
        PagedIterable<BinaryData> response =
                receivedSharesClient.listAttachedReceivedShares(
                        "/subscriptions/4D8FD81D-431D-4B1D-B46C-C770CFC034FC/resourceGroups/contoso-rg/providers/Microsoft.Storage/storageAccounts/blobAccount",
                        requestOptions);

        Optional<BinaryData> receivedShare = response.stream().findFirst();
        
        if (receivedShare.isEmpty()) {
            return;
        }

        String receivedShareId = new ObjectMapper()
                .readValue(receivedShare.get().toString(), ObjectNode.class)
                .get("id")
                .textValue();
        // END: com.azure.analytics.purview.share.listAttachedReceivedShare

    }
}
